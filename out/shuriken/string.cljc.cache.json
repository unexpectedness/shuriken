["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$slice","~$shuriken.sequential"],"~:excludes",["~#set",[]],"~:name","~$shuriken.string","~:imports",null,"~:requires",["^ ","~$pprint","~$cljs.pprint","~$gstring","~$goog.string","^>","^>","^<","^<","~$goog.string.format","^?","~$clojure.pprint","^<","^4","^4","~$str","~$clojure.string","^B","^B"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^;","^<","^3","^4"],"~:defs",["^ ","~$no-print",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/string.cljc","~:end-column",19,"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",0,"~:max-fixed-arity",0,"~:method-params",["~#list",[["^P",["~$body"]]]],"~:arglists",["^P",[["~$&","^Q"]]],"~:arglists-meta",["^P",[null]]],"~:column",11,"~:line",72,"~:macro",true,"~:end-line",72,"^R",["^P",["~$quote",["^P",[["~$&","^Q"]]]]],"~:doc","Binds *out* to an anonymous writer used as /dev/null and returns\n  the value of the last expr in body."],"^7","~$shuriken.string/no-print","^I","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/string.cljc","^J",19,"^K",["^ ","^L",true,"^M",0,"^N",0,"^O",["^P",[["^P",["^Q"]]]],"^R",["^P",[["~$&","^Q"]]],"^S",["^P",[null]]],"^O",["^P",[["^P",["^Q"]]]],"~:protocol-impl",null,"^M",0,"^S",["^P",[null]],"^T",1,"^L",true,"~:methods",[["^ ","^M",0,"^L",true,"~:tag",["^6",["~$seq","~$cljs.core/IList"]]]],"^U",72,"^V",true,"~:ret-tag","~$any","^W",72,"^N",0,"~:fn-var",false,"^R",["^P",[["~$&","^Q"]]],"^Y","Binds *out* to an anonymous writer used as /dev/null and returns\n  the value of the last expr in body."],"~$truncate",["^ ","^G",null,"^H",["^ ","^I","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/string.cljc","^U",61,"^T",7,"^W",61,"^J",15,"^R",["^P",["^X",["^P",[["~$s","~$length"],["~$s","^18","~$pad"]]]]],"^Y","Truncate a string with `pad` beyond a certain length. By default,\n  `pad` is `\"...\"`.","^K",["^ ","^L",false,"^M",3,"^N",3,"^O",[["~$s","^18"],["~$s","^18","^19"]],"^R",["^P",[["~$s","^18"],["~$s","^18","^19"]]],"^S",["^P",[null,null]]]],"^7","~$shuriken.string/truncate","^I","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/string.cljc","^J",15,"^K",["^ ","^L",false,"^M",3,"^N",3,"^O",[["~$s","^18"],["~$s","^18","^19"]],"^R",["^P",[["~$s","^18"],["~$s","^18","^19"]]],"^S",["^P",[null,null]]],"^O",[["~$s","^18"],["~$s","^18","^19"]],"^[",null,"^M",3,"^S",["^P",[null,null]],"^T",1,"^L",false,"^10",[["^ ","^M",2,"^L",false,"^11","^15"],["^ ","^M",3,"^L",false,"^11",["^6",[null,"~$string"]]]],"^U",61,"^W",61,"^N",3,"^16",true,"^R",["^P",[["~$s","^18"],["~$s","^18","^19"]]],"^Y","Truncate a string with `pad` beyond a certain length. By default,\n  `pad` is `\"...\"`."],"~$words",["^ ","^G",null,"^H",["^ ","^I","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/string.cljc","^U",38,"^T",7,"^W",38,"^J",12,"^R",["^P",["^X",["^P",[["~$s"]]]]],"^Y","Splits a string around whitespaces."],"^7","~$shuriken.string/words","^I","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/string.cljc","^J",12,"^O",["^P",[["~$s"]]],"^[",null,"^S",["^P",[null,null]],"^T",1,"^L",false,"^U",38,"^14","~$cljs.core/LazySeq","^W",38,"^N",1,"^16",true,"^R",["^P",["^X",["^P",[["~$s"]]]]],"^Y","Splits a string around whitespaces."],"~$lines",["^ ","^G",null,"^H",["^ ","^I","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/string.cljc","^U",33,"^T",7,"^W",33,"^J",12,"^R",["^P",["^X",["^P",[["~$s"]]]]],"^Y","Splits a string around newlines."],"^7","~$shuriken.string/lines","^I","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/string.cljc","^J",12,"^O",["^P",[["~$s"]]],"^[",null,"^S",["^P",[null,null]],"^T",1,"^L",false,"^U",33,"^14","^15","^W",33,"^N",1,"^16",true,"^R",["^P",["^X",["^P",[["~$s"]]]]],"^Y","Splits a string around newlines."],"~$tabulate",["^ ","^G",null,"^H",["^ ","^I","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/string.cljc","^U",54,"^T",7,"^W",54,"^J",15,"^R",["^P",["^X",["^P",[["~$s","^19"]]]]],"^Y","Left-pad a string with `pad`, taking newlines into account."],"^7","~$shuriken.string/tabulate","^I","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/string.cljc","^J",15,"^O",["^P",[["~$s","^19"]]],"^[",null,"^S",["^P",[null,null]],"^T",1,"^L",false,"^U",54,"^14","^1;","^W",54,"^N",2,"^16",true,"^R",["^P",["^X",["^P",[["~$s","^19"]]]]],"^Y","Left-pad a string with `pad`, taking newlines into account."],"~$adjust",["^ ","^G",null,"^H",["^ ","^I","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/string.cljc","^U",21,"^T",7,"^W",21,"^J",13,"^R",["^P",["^X",["^P",[["~$direction","~$n","~$s"]]]]],"^Y","Left or right-adjust a string."],"^7","~$shuriken.string/adjust","^I","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/string.cljc","^J",13,"^O",["^P",[["^1D","~$n","~$s"]]],"^[",null,"^S",["^P",[null,null]],"^T",1,"^L",false,"^U",21,"^14","^15","^W",21,"^N",3,"^16",true,"^R",["^P",["^X",["^P",[["^1D","~$n","~$s"]]]]],"^Y","Left or right-adjust a string."],"~$join-words",["^ ","^G",null,"^H",["^ ","^I","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/string.cljc","^U",49,"^T",7,"^W",49,"^J",17,"^R",["^P",["^X",["^P",[["^1<"]]]]],"^Y","Glues strings together with spaces."],"^7","~$shuriken.string/join-words","^I","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/string.cljc","^J",17,"^O",["^P",[["^1<"]]],"^[",null,"^S",["^P",[null,null]],"^T",1,"^L",false,"^U",49,"^14","^1;","^W",49,"^N",1,"^16",true,"^R",["^P",["^X",["^P",[["^1<"]]]]],"^Y","Glues strings together with spaces."],"~$format-code",["^ ","^G",null,"^H",["^ ","^I","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/string.cljc","^U",10,"^T",7,"^W",10,"^J",18,"^R",["^P",["^X",["^P",[["~$code"]]]]],"^Y","Returns a string as formatted by `clojure.pprint/code-dispatch`."],"^7","~$shuriken.string/format-code","^I","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/string.cljc","^J",18,"^O",["^P",[["^1I"]]],"^[",null,"^S",["^P",[null,null]],"^T",1,"^L",false,"^U",10,"^14","^1;","^W",10,"^N",1,"^16",true,"^R",["^P",["^X",["^P",[["^1I"]]]]],"^Y","Returns a string as formatted by `clojure.pprint/code-dispatch`."],"~$join-lines",["^ ","^G",null,"^H",["^ ","^I","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/string.cljc","^U",44,"^T",7,"^W",44,"^J",17,"^R",["^P",["^X",["^P",[["^1?"]]]]],"^Y","Glues strings together with newlines."],"^7","~$shuriken.string/join-lines","^I","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/string.cljc","^J",17,"^O",["^P",[["^1?"]]],"^[",null,"^S",["^P",[null,null]],"^T",1,"^L",false,"^U",44,"^14","^1;","^W",44,"^N",1,"^16",true,"^R",["^P",["^X",["^P",[["^1?"]]]]],"^Y","Glues strings together with newlines."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^;","^<","^<","^<","^@","^<","^4","^4"],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~$cljs.core/binding","~$java.io.StringWriter","~$cljs.core/*out*","~$new","~:right","~:include-empty","~:left"]],"~:order",["^1U","^1W","^1V","^1Q","^1S","^1T","^1R"]],"^Y","### Functions on strings","~:as-aliases",["^ "]]