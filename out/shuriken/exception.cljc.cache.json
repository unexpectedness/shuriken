["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$submap?","~$shuriken.associative"],"~:excludes",["~#set",[]],"~:name","~$shuriken.exception","~:imports",null,"~:requires",["^ ","^4","^4","~$macrov","~$net.cgrand.macrovich","^<","^<"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^3","^4"],"~:defs",["^ ","~$regex?",["^ ","~:no-doc",true,"~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/exception.cljc","~:line",8,"~:column",16,"~:end-line",8,"~:end-column",22,"^A",true,"~:arglists",["~#list",["~$quote",["^J",[["~$x"]]]]]],"^7","~$shuriken.exception/regex?","^D","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/exception.cljc","^H",22,"~:method-params",["^J",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^J",[null,null]],"^F",1,"~:variadic?",false,"^E",8,"~:ret-tag","~$boolean","^G",8,"~:max-fixed-arity",1,"~:fn-var",true,"^I",["^J",["^K",["^J",[["~$x"]]]]]],"~$catch-it-matches?",["^ ","^A",true,"^B",null,"^C",["^ ","^D","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/exception.cljc","^E",13,"^F",16,"^G",13,"^H",33,"^A",true,"^I",["^J",["^K",["^J",[["~$e","~$pattern"]]]]]],"^7","~$shuriken.exception/catch-it-matches?","^D","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/exception.cljc","^H",33,"^M",["^J",[["~$e","^V"]]],"^N",null,"^O",["^J",[null,null]],"^F",1,"^P",false,"^E",13,"^Q",["^6",["~$clj","^R","~$cljs.core/IVector","~$any","~$cljs.core/MetaFn","~$clj-nil"]],"^G",13,"^S",2,"^T",true,"^I",["^J",["^K",["^J",[["~$e","^V"]]]]]],"~$catch-it",["^ ","^B",null,"^C",["^ ","^D","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/exception.cljc","^E",30,"^F",11,"^G",30,"^H",19,"~:macro",true,"^I",["^J",["^K",["^J",[["~$substitute-f","^V","~$expr"]]]]]],"^7","~$shuriken.exception/catch-it","^D","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/exception.cljc","^H",19,"^M",["^J",[["~$&form","~$&env","^13","^V","^14"]]],"^N",null,"^O",["^J",[null,null]],"^F",1,"^P",false,"^E",30,"^12",true,"^Q",["^6",["~$seq","~$cljs.core/IList"]],"^G",30,"^S",5,"^T",false,"^I",["^J",["^K",["^J",[["^13","^V","^14"]]]]]],"~$silence",["^ ","^B",null,"^C",["^ ","^D","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/exception.cljc","^H",18,"~:top-fn",["^ ","^P",false,"~:fixed-arity",3,"^S",3,"^M",["^J",[["^V","^14"],["~$substitute","^V","^14"]]],"^I",["^J",[["^V","^14"],["^1=","^V","^14"]]],"^O",["^J",[null,null]]],"^F",11,"^E",41,"^12",true,"^G",41,"^I",["^J",["^K",["^J",[["^V","^14"],["^1=","^V","^14"]]]]],"~:doc","Returns `substitute` if `expr` raises an exception that matches\n  `pattern`.\n  If not provided, `substitute` is `nil`.\n  `pattern` can be:\n    - a function\n    - a class\n    - a string\n    - a regex pattern (used via `re-find`)\n    - a map (matches if it's a submap of an ExceptionInfo's data)\n    - or a sequence of such elements.\n\n  ```clojure\n  (silence ArithmeticException (/ 1 0))\n  => nil\n\n  (silence \"Divide by zero\" (/ 1 0))\n  => nil\n\n  (silence #\"zero\" (/ 1 0))\n  => nil\n\n  (silence [ArithmeticException]\n    (do (println \"watch out !\")\n        (/ 1 0)))\n  ;; watch out !\n  => nil\n\n  (silence :substitute\n           (fn [x]\n             (isa? (class x) ArithmeticException))\n           (/ 1 0))\n  => :substitute\n  ```"],"^7","~$shuriken.exception/silence","^D","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/exception.cljc","^H",18,"^1;",["^ ","^P",false,"^1<",3,"^S",3,"^M",["^J",[["^V","^14"],["^1=","^V","^14"]]],"^I",["^J",[["^V","^14"],["^1=","^V","^14"]]],"^O",["^J",[null,null]]],"^M",["^J",[["^V","^14"],["^1=","^V","^14"]]],"^N",null,"^1<",3,"^O",["^J",[null,null]],"^F",1,"^P",false,"~:methods",[["^ ","^1<",4,"^P",false,"~:tag",["^6",["^18","^19"]]],["^ ","^1<",5,"^P",false,"^1A",["^6",["^18","^19"]]]],"^E",41,"^12",true,"^G",41,"^S",3,"^T",false,"^I",["^J",[["^V","^14"],["^1=","^V","^14"]]],"^1>","Returns `substitute` if `expr` raises an exception that matches\n  `pattern`.\n  If not provided, `substitute` is `nil`.\n  `pattern` can be:\n    - a function\n    - a class\n    - a string\n    - a regex pattern (used via `re-find`)\n    - a map (matches if it's a submap of an ExceptionInfo's data)\n    - or a sequence of such elements.\n\n  ```clojure\n  (silence ArithmeticException (/ 1 0))\n  => nil\n\n  (silence \"Divide by zero\" (/ 1 0))\n  => nil\n\n  (silence #\"zero\" (/ 1 0))\n  => nil\n\n  (silence [ArithmeticException]\n    (do (println \"watch out !\")\n        (/ 1 0)))\n  ;; watch out !\n  => nil\n\n  (silence :substitute\n           (fn [x]\n             (isa? (class x) ArithmeticException))\n           (/ 1 0))\n  => :substitute\n  ```"],"~$thrown?",["^ ","^B",null,"^C",["^ ","^D","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/exception.cljc","^E",80,"^F",11,"^G",80,"^H",18,"^12",true,"^I",["^J",["^K",["^J",[["^V","^14"]]]]],"^1>","Returns true if `expr` raises an exception matching `pattern`.\n  See [[silence]] for the semantics of `pattern`.\n\n  ```clojure\n  (thrown? ArithmeticException (/ 1 0))\n  => true\n\n  (thrown? #{ArithmeticException} (/ 1 1))\n  => false\n\n  (thrown? (fn [x]\n             (isa? (class x) ArithmeticException))\n           (throw (IllegalArgumentException. \"my-error\")))\n  ;; raises:\n  ;;   IllegalArgumentException my-error\n  ```"],"^7","~$shuriken.exception/thrown?","^D","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/exception.cljc","^H",18,"^M",["^J",[["^16","^17","^V","^14"]]],"^N",null,"^O",["^J",[null,null]],"^F",1,"^P",false,"^E",80,"^12",true,"^Q",["^6",["^18","^19"]],"^G",80,"^S",4,"^T",false,"^I",["^J",["^K",["^J",[["^V","^14"]]]]],"^1>","Returns true if `expr` raises an exception matching `pattern`.\n  See [[silence]] for the semantics of `pattern`.\n\n  ```clojure\n  (thrown? ArithmeticException (/ 1 0))\n  => true\n\n  (thrown? #{ArithmeticException} (/ 1 1))\n  => false\n\n  (thrown? (fn [x]\n             (isa? (class x) ArithmeticException))\n           (throw (IllegalArgumentException. \"my-error\")))\n  ;; raises:\n  ;;   IllegalArgumentException my-error\n  ```"],"~$capturex",["^ ","^B",null,"^C",["^ ","^D","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/exception.cljc","^E",101,"^F",11,"^G",101,"^H",19,"^12",true,"^I",["^J",["^K",["^J",[["^V","^14"]]]]],"^1>","Gently returns exceptions matching `pattern` when they are raised instead\n  of propagating them upwards."],"^7","~$shuriken.exception/capturex","^D","/Users/clement/Documents/Code/Clojure/shuriken/src/shuriken/exception.cljc","^H",19,"^M",["^J",[["^16","^17","^V","^14"]]],"^N",null,"^O",["^J",[null,null]],"^F",1,"^P",false,"^E",101,"^12",true,"^Q",["^6",["^18","^19"]],"^G",101,"^S",4,"^T",false,"^I",["^J",["^K",["^J",[["^V","^14"]]]]],"^1>","Gently returns exceptions matching `pattern` when they are raised instead\n  of propagating them upwards."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^8","^8","^4","^4"],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~$try","~$cljs.core/=","~:else","~$cljs.core/identity","^1?","~:shuriken.exception/thrown!","~$if","~$t__38558__auto__","^15","~$cljs.core/let","~$cljs.core/constantly","^W","~$pattern__38557__auto__","~$catch","~$throw","~$js/Error"]],"~:order",["^1L","^1Q","^1S","^1J","^1T","^1V","^1P","^1O","^W","^1U","^1?","^15","^1R","^1K","^1N","^1M"]],"^1>","### Macros to deal with exceptions","~:as-aliases",["^ "]]